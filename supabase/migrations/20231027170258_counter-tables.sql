drop policy "Enable insert for authenticated users only" on "public"."test";

drop policy "Enable read access for all users" on "public"."test";

alter table "public"."test" drop constraint "test_pkey";

drop index if exists "public"."test_pkey";

drop table "public"."test";

create table "public"."public_table" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "global_counter" bigint not null default '0'::bigint
);


alter table "public"."public_table" enable row level security;

create table "public"."user_data" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "counter" bigint not null default '0'::bigint
);


alter table "public"."user_data" enable row level security;

CREATE UNIQUE INDEX public_table_pkey ON public.public_table USING btree (id);

CREATE UNIQUE INDEX user_data_pkey ON public.user_data USING btree (id);

CREATE UNIQUE INDEX user_data_user_id_key ON public.user_data USING btree (user_id);

alter table "public"."public_table" add constraint "public_table_pkey" PRIMARY KEY using index "public_table_pkey";

alter table "public"."user_data" add constraint "user_data_pkey" PRIMARY KEY using index "user_data_pkey";

alter table "public"."user_data" add constraint "user_data_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_data" validate constraint "user_data_user_id_fkey";

alter table "public"."user_data" add constraint "user_data_user_id_key" UNIQUE using index "user_data_user_id_key";

create policy "Enable read access for all users"
on "public"."public_table"
as permissive
for select
to public
using (true);


create policy "Enable update for authenticated users only"
on "public"."public_table"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable insert for users based on user_id"
on "public"."user_data"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Enable select for authenticated users only"
on "public"."user_data"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for users based on user_id"
on "public"."user_data"
as permissive
for update
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



-- Insert id: 0, counter: 0 into public_table:
insert into public_table (id, global_counter) values (0, 0);

alter
  publication supabase_realtime add table user_data;
alter
  publication supabase_realtime add table public_table;